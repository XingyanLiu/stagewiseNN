{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b92a239e",
   "metadata": {},
   "source": [
    "# Tutorial for using stagewiseNN\n",
    "\n",
    "TODO:\n",
    "    Add some descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c103d140",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "from pathlib import Path\n",
    "from typing import Sequence, Mapping, Optional, Union, Callable\n",
    "import logging\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scanpy as sc\n",
    "\n",
    "ROOT = Path('../')  \n",
    "sys.path.append(str(ROOT))\n",
    "\n",
    "import swnn\n",
    "from swnn.utils.process import describe_dataframe, set_adata_hvgs, change_names\n",
    "\n",
    "DATADIR = ROOT / 'sample_data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7d76be03",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_adata(datadir=DATADIR, ):\n",
    "    path = datadir / 'merged_B-L0-0.2.h5ad'\n",
    "    adata = sc.read_h5ad(path)\n",
    "    return adata\n",
    "\n",
    "\n",
    "def get_high_freq_hvgs(min_freq=3, datadir=DATADIR):\n",
    "    hvg_freq = pd.read_csv(\n",
    "        datadir / 'hvg_frequencies.csv', index_col=0, header=None)\n",
    "    hvg_freq = hvg_freq.iloc[:, 0]\n",
    "    return hvg_freq[hvg_freq >= min_freq].index.tolist()\n",
    "\n",
    "\n",
    "def formulate_adata(adata, save_path=None):\n",
    "    adata.obs.columns = change_names(\n",
    "        adata.obs.columns, stage='stage_id', )\n",
    "    adata.obs['lineage'] = change_names(\n",
    "        adata.obs['lineage'],\n",
    "        {'Tail bud stem cells': 'Unassigned'}\n",
    "    )\n",
    "    adata.obs['stage_primer'] = adata.obs[['stage_name', 'primer']].apply(\n",
    "        lambda x: '_'.join(x), axis=1\n",
    "    )\n",
    "    adata.obs['stagewise_cluster'] = adata.obs[['stage_name', 'leiden_new']].apply(\n",
    "        lambda x: '_'.join(x), axis=1\n",
    "    )\n",
    "    adata.obs['stagewise_cluster'] = change_names(\n",
    "        adata.obs['stagewise_cluster'],\n",
    "        {'B_1': 'B_0', 'B_2': 'B_1', 'B_3': 'B_2'}\n",
    "    )\n",
    "\n",
    "    if save_path is not None:\n",
    "        adata.write(save_path)\n",
    "    return adata\n",
    "\n",
    "\n",
    "def _inspect_data(log_file=None):\n",
    "    adata = get_adata()\n",
    "    adata = formulate_adata(adata)\n",
    "    print(adata, file=log_file)\n",
    "    describe_dataframe(adata.obs, file=log_file)\n",
    "    # TODO: additional markers of prior knowledge\n",
    "    hvgs = get_high_freq_hvgs()\n",
    "    print('Total of %d HVGs are used.', len(hvgs), file=log_file)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "75e93811",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "already exists:\n",
      "\t../_temp\n"
     ]
    }
   ],
   "source": [
    "resdir = ROOT / '_temp'\n",
    "swnn.check_dirs(resdir)\n",
    "\n",
    "adata0 = get_adata()\n",
    "adata0 = formulate_adata(adata0)\n",
    "# TODO: additional markers of prior knowledge\n",
    "hvgs = get_high_freq_hvgs()\n",
    "adata = swnn.quick_preprocess_raw(\n",
    "    adata0, hvgs=hvgs, copy=True, batch_key='stage_primer')\n",
    "\n",
    "X = adata.X\n",
    "stage_lbs = adata.obs['stage_name']\n",
    "stage_order = (\"B\", \"G3\", \"G4\", \"G5\", \"G6\", \"N0\", \"N1\", \"N3\", \"L0\")\n",
    "ks = [10] * 7 + [5] + [3]\n",
    "n_pcs = [30] * 5 + [50] * 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f2de82a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 29775 × 3569\n",
       "    obs: 'stage_id', 'primer', 'n_genes', 'n_counts', 'stage_primer', 'stg_leiden', 'stage_stg_leiden', 'refined_group', 'leiden_new', 'parent_bcd', 'lineage', 'stage_name', 'stagewise_cluster'\n",
       "    var: 'highly_variable'\n",
       "    uns: 'log1p', 'neighbors'\n",
       "    obsp: 'distances', 'connectivities'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distmat, connect = swnn.stagewise_knn(\n",
    "    X, stage_lbs, stage_order,\n",
    "    k=ks,\n",
    "    leaf_size=1, # 1 for brute-force KNN\n",
    "    pca_base_on='stacked',\n",
    "    n_pcs=n_pcs,\n",
    "    binary_edge=False,\n",
    "    )\n",
    "connect_bin = swnn.make_binary(connect)\n",
    "swnn.set_precomputed_neighbors(adata, distmat, connect_bin, )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b21bffd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sc.tl.umap(adata, min_dist=0.1)\n",
    "# sc.settings.figdir = resdir\n",
    "# sc.set_figure_params(fontsize=14)\n",
    "#\n",
    "# lin_colors = pd.read_csv(\n",
    "#     'sample_data/lineage_colors.csv', index_col=0).iloc[:, 0]\n",
    "# adata.obs['lineage'] = pd.Categorical(\n",
    "#     adata.obs['lineage'], categories=lin_colors.index)\n",
    "# adata.uns['lineage_colors'] = lin_colors.tolist()\n",
    "# sc.pl.umap(adata, color='lineage', ncols=1, save='_lineage.pdf')\n",
    "# sc.pl.umap(adata, color='stage_name', palette='plasma_r', save='_stage.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91b5ac48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "connecting stage B and G3\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['B_1' 'B_0' 'B_2']\n",
      "unique labels of columns: ['G3_1' 'G3_0' 'G3_3' 'G3_4' 'G3_2' 'G3_5']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1596, 3) (1826, 6)\n",
      "parent nodes that had no descendent: ['B_2']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['B_1' 'B_0' 'B_2']\n",
      "unique labels of columns: ['G3_1' 'G3_0' 'G3_3' 'G3_4' 'G3_2' 'G3_5' 'G3_6']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1596, 3) (1826, 7)\n",
      "\n",
      "connecting stage G3 and G4\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G3_0', 'G3_1', 'G3_2', 'G3_3', 'G3_4', 'G3_5', 'G3_6']\n",
      "unique labels of columns: ['G4_0' 'G4_4' 'G4_2' 'G4_3' 'G4_1']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1826, 7) (1477, 5)\n",
      "parent nodes that had no descendent: ['G3_3', 'G3_6']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G3_0', 'G3_1', 'G3_2', 'G3_3', 'G3_4', 'G3_5', 'G3_6']\n",
      "unique labels of columns: ['G4_0' 'G4_4' 'G4_2' 'G4_3' 'G4_5' 'G4_1' 'G4_6']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1826, 7) (1477, 7)\n",
      "\n",
      "connecting stage G4 and G5\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G4_0', 'G4_1', 'G4_2', 'G4_3', 'G4_4', 'G4_5', 'G4_6']\n",
      "unique labels of columns: ['G5_2' 'G5_0' 'G5_3' 'G5_1' 'G5_5' 'G5_8' 'G5_6' 'G5_4' 'G5_7']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1477, 7) (4098, 9)\n",
      "parent nodes that had no descendent: ['G4_5', 'G4_6']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G4_0', 'G4_1', 'G4_2', 'G4_3', 'G4_4', 'G4_5', 'G4_6']\n",
      "unique labels of columns: ['G5_2' 'G5_0' 'G5_3' 'G5_1' 'G5_5' 'G5_8' 'G5_6' 'G5_4' 'G5_7' 'G5_9'\n",
      " 'G5_10']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (1477, 7) (4098, 11)\n",
      "\n",
      "connecting stage G5 and G6\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G5_0', 'G5_1', 'G5_2', 'G5_3', 'G5_4', 'G5_5', 'G5_6', 'G5_7', 'G5_8', 'G5_9', 'G5_10']\n",
      "unique labels of columns: ['G6_1' 'G6_0' 'G6_3' 'G6_4' 'G6_8' 'G6_7' 'G6_5' 'G6_6' 'G6_2']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4098, 11) (4775, 9)\n",
      "parent nodes that had no descendent: ['G5_8', 'G5_9', 'G5_10']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G5_0', 'G5_1', 'G5_2', 'G5_3', 'G5_4', 'G5_5', 'G5_6', 'G5_7', 'G5_8', 'G5_9', 'G5_10']\n",
      "unique labels of columns: ['G6_1' 'G6_0' 'G6_3' 'G6_4' 'G6_8' 'G6_7' 'G6_5' 'G6_6' 'G6_2' 'G6_10'\n",
      " 'G6_9']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4098, 11) (4775, 11)\n",
      "\n",
      "connecting stage G6 and N0\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G6_0', 'G6_1', 'G6_2', 'G6_3', 'G6_4', 'G6_5', 'G6_6', 'G6_7', 'G6_8', 'G6_9', 'G6_10']\n",
      "unique labels of columns: ['N0_6' 'N0_2' 'N0_8' 'N0_5' 'N0_4' 'N0_3' 'N0_1' 'N0_0' 'N0_9' 'N0_7']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4775, 11) (4992, 10)\n",
      "parent nodes that had no descendent: ['G6_9', 'G6_10']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['G6_0', 'G6_1', 'G6_2', 'G6_3', 'G6_4', 'G6_5', 'G6_6', 'G6_7', 'G6_8', 'G6_9', 'G6_10']\n",
      "unique labels of columns: ['N0_6' 'N0_2' 'N0_8' 'N0_5' 'N0_4' 'N0_3' 'N0_1' 'N0_0' 'N0_9' 'N0_7'\n",
      " 'N0_11']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4775, 11) (4992, 11)\n",
      "\n",
      "connecting stage N0 and N1\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N0_0', 'N0_1', 'N0_2', 'N0_3', 'N0_4', 'N0_5', 'N0_6', 'N0_7', 'N0_8', 'N0_9', 'N0_11']\n",
      "unique labels of columns: ['N1_4' 'N1_3' 'N1_2' 'N1_0' 'N1_7' 'N1_6' 'N1_5' 'N1_8' 'N1_1' 'N1_9']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4992, 11) (4399, 10)\n",
      "parent nodes that had no descendent: ['N0_11']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N0_0', 'N0_1', 'N0_2', 'N0_3', 'N0_4', 'N0_5', 'N0_6', 'N0_7', 'N0_8', 'N0_9', 'N0_11']\n",
      "unique labels of columns: ['N1_4' 'N1_3' 'N1_2' 'N1_0' 'N1_7' 'N1_6' 'N1_5' 'N1_8' 'N1_1' 'N1_9'\n",
      " 'N1_10']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4992, 11) (4399, 11)\n",
      "\n",
      "connecting stage N1 and N3\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N1_0', 'N1_1', 'N1_2', 'N1_3', 'N1_4', 'N1_5', 'N1_6', 'N1_7', 'N1_8', 'N1_9', 'N1_10']\n",
      "unique labels of columns: ['N3_0' 'N3_6' 'N3_2' 'N3_8' 'N3_4' 'N3_10' 'N3_9' 'N3_1' 'N3_13' 'N3_3'\n",
      " 'N3_7' 'N3_5' 'N3_11' 'N3_12']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4399, 11) (4448, 14)\n",
      "parent nodes that had no descendent: ['N1_3', 'N1_9', 'N1_10']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N1_0', 'N1_1', 'N1_2', 'N1_3', 'N1_4', 'N1_5', 'N1_6', 'N1_7', 'N1_8', 'N1_9', 'N1_10']\n",
      "unique labels of columns: ['N3_0' 'N3_6' 'N3_2' 'N3_8' 'N3_4' 'N3_10' 'N3_9' 'N3_1' 'N3_13' 'N3_3'\n",
      " 'N3_7' 'N3_5' 'N3_11' 'N3_12' 'N3_15' 'N3_14']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4399, 11) (4448, 16)\n",
      "\n",
      "connecting stage N3 and L0\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N3_0', 'N3_1', 'N3_2', 'N3_3', 'N3_4', 'N3_5', 'N3_6', 'N3_7', 'N3_8', 'N3_9', 'N3_10', 'N3_11', 'N3_12', 'N3_13', 'N3_14', 'N3_15']\n",
      "unique labels of columns: ['L0_4' 'L0_1' 'L0_0' 'L0_14' 'L0_6' 'L0_7' 'L0_12' 'L0_10' 'L0_11' 'L0_5'\n",
      " 'L0_8' 'L0_2' 'L0_9' 'L0_16' 'L0_3' 'L0_15' 'L0_13']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4448, 16) (2164, 17)\n",
      "parent nodes that had no descendent: ['N3_5', 'N3_9', 'N3_11', 'N3_14', 'N3_15']\n",
      "Taking descendant-points from other nodes (groups)\n",
      "pasting stage labels\n",
      "---> aggregating edges...\n",
      "unique labels of rows: ['N3_0', 'N3_1', 'N3_2', 'N3_3', 'N3_4', 'N3_5', 'N3_6', 'N3_7', 'N3_8', 'N3_9', 'N3_10', 'N3_11', 'N3_12', 'N3_13', 'N3_14', 'N3_15']\n",
      "unique labels of columns: ['L0_4' 'L0_1' 'L0_0' 'L0_14' 'L0_6' 'L0_7' 'L0_12' 'L0_10' 'L0_11' 'L0_5'\n",
      " 'L0_8' 'L0_2' 'L0_9' 'L0_16' 'L0_3' 'L0_15' 'L0_19' 'L0_13' 'L0_17'\n",
      " 'L0_20' 'L0_18' 'L0_21']\n",
      "grouping elements (edges)\n",
      "shape of the one-hot-labels: (4448, 16) (2164, 22)\n",
      "\n",
      "Binarized...the results will be the expression proportions.\n",
      "Calculating feature averages for 99 groups\n",
      "['B_0' 'B_1' 'B_2' 'G3_0' 'G3_1' 'G3_2' 'G3_3' 'G3_4' 'G3_5' 'G3_6' 'G4_0'\n",
      " 'G4_1' 'G4_2' 'G4_3' 'G4_4' 'G4_5' 'G4_6' 'G5_0' 'G5_1' 'G5_10' 'G5_2'\n",
      " 'G5_3' 'G5_4' 'G5_5' 'G5_6' 'G5_7' 'G5_8' 'G5_9' 'G6_0' 'G6_1' 'G6_10'\n",
      " 'G6_2' 'G6_3' 'G6_4' 'G6_5' 'G6_6' 'G6_7' 'G6_8' 'G6_9' 'L0_0' 'L0_1'\n",
      " 'L0_10' 'L0_11' 'L0_12' 'L0_13' 'L0_14' 'L0_15' 'L0_16' 'L0_17' 'L0_18'\n",
      " 'L0_19' 'L0_2' 'L0_20' 'L0_21' 'L0_3' 'L0_4' 'L0_5' 'L0_6' 'L0_7' 'L0_8'\n",
      " 'L0_9' 'N0_0' 'N0_1' 'N0_11' 'N0_2' 'N0_3' 'N0_4' 'N0_5' 'N0_6' 'N0_7'\n",
      " 'N0_8' 'N0_9' 'N1_0' 'N1_1' 'N1_10' 'N1_2' 'N1_3' 'N1_4' 'N1_5' 'N1_6'\n",
      " 'N1_7' 'N1_8' 'N1_9' 'N3_0' 'N3_1' 'N3_10' 'N3_11' 'N3_12' 'N3_13'\n",
      " 'N3_14' 'N3_15' 'N3_2' 'N3_3' 'N3_4' 'N3_5' 'N3_6' 'N3_7' 'N3_8' 'N3_9']\n",
      "Calculating feature averages for 99 groups\n",
      "['B_0' 'B_1' 'B_2' 'G3_0' 'G3_1' 'G3_2' 'G3_3' 'G3_4' 'G3_5' 'G3_6' 'G4_0'\n",
      " 'G4_1' 'G4_2' 'G4_3' 'G4_4' 'G4_5' 'G4_6' 'G5_0' 'G5_1' 'G5_10' 'G5_2'\n",
      " 'G5_3' 'G5_4' 'G5_5' 'G5_6' 'G5_7' 'G5_8' 'G5_9' 'G6_0' 'G6_1' 'G6_10'\n",
      " 'G6_2' 'G6_3' 'G6_4' 'G6_5' 'G6_6' 'G6_7' 'G6_8' 'G6_9' 'L0_0' 'L0_1'\n",
      " 'L0_10' 'L0_11' 'L0_12' 'L0_13' 'L0_14' 'L0_15' 'L0_16' 'L0_17' 'L0_18'\n",
      " 'L0_19' 'L0_2' 'L0_20' 'L0_21' 'L0_3' 'L0_4' 'L0_5' 'L0_6' 'L0_7' 'L0_8'\n",
      " 'L0_9' 'N0_0' 'N0_1' 'N0_11' 'N0_2' 'N0_3' 'N0_4' 'N0_5' 'N0_6' 'N0_7'\n",
      " 'N0_8' 'N0_9' 'N1_0' 'N1_1' 'N1_10' 'N1_2' 'N1_3' 'N1_4' 'N1_5' 'N1_6'\n",
      " 'N1_7' 'N1_8' 'N1_9' 'N3_0' 'N3_1' 'N3_10' 'N3_11' 'N3_12' 'N3_13'\n",
      " 'N3_14' 'N3_15' 'N3_2' 'N3_3' 'N3_4' 'N3_5' 'N3_6' 'N3_7' 'N3_8' 'N3_9']\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy import sparse\n",
    "obs = adata.obs\n",
    "group_lbs = obs['stagewise_cluster'].values\n",
    "stage_lbs = obs['stage_name'].values\n",
    "KEY_TREE_NODE = 'tree_node'\n",
    "\n",
    "# graph to tree\n",
    "conn_upper = sparse.triu(connect).tocsc()\n",
    "adj_max = swnn.max_connection(conn_upper)\n",
    "edgedf, new_group_lbs = swnn.adaptive_tree(\n",
    "    adj_max, group_lbs, stage_lbs=stage_lbs, stage_ord=stage_order)\n",
    "\n",
    "obs[KEY_TREE_NODE] = new_group_lbs\n",
    "edgedf.prop.hist() # voting proportions\n",
    "logging.info(\"edgedf = %s\", edgedf)\n",
    "\n",
    "df_tree = edgedf[['node', 'parent']].copy()\n",
    "df_tree['label'] = df_tree['node'].copy()\n",
    "df_tree['stage'] = df_tree['node'].apply(lambda x: x.split('_')[0])\n",
    "groupby = KEY_TREE_NODE\n",
    "props_all = swnn.group_mean_adata(adata, groupby, use_raw=True, binary=True)\n",
    "means_all = swnn.group_mean_adata(adata, groupby, use_raw=True, )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eab3cd70",
   "metadata": {},
   "outputs": [],
   "source": [
    "# props_all.to_csv(resdir / f'expr_prop_all.csv', index=True, header=True)\n",
    "# means_all.to_csv(resdir / f'avg_expr_all.csv', index=True, header=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
